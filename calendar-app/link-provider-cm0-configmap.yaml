apiVersion: v1
data:
  email_service.py: "# using flask_restful\nfrom flask import Flask, jsonify, request\nfrom flask_cors import CORS\n\nfrom flask_restful import Resource, Api\nimport smtplib\nfrom email.message import EmailMessage\nimport logging\n\n# ...existing imports...\nimport os\nimport mysql.connector\n\n# Helper to read Docker secrets\ndef get_secret(secret_path):\n    try:\n        with open(secret_path, 'r') as f:\n            return f.read().strip()\n    except Exception as e:\n        app.logger.error(f\"Failed to read secret {secret_path}: {e}\")\n        return None\n\n# Read secrets at startup\nDB_USER = get_secret('/run/secrets/db_user')\nDB_PASSWORD = get_secret('/run/secrets/db_password')\n# creating the flask app\napp = Flask(__name__)\nCORS(app)\n# Set up logging\nlogging.basicConfig(level=logging.INFO)\n# creating an API object\napi = Api(app)\n\nclass Hello(Resource):\n\n    def get(self):\n        app.logger.info(\"GET request received at Hello endpoint\")\n        return {'message': 'hello world'}\n\n    def post(self):\n        data = request.get_json()\n        app.logger.info(f\"POST request received at Hello endpoint with data: {data}\")\n        return {'data': data}, 201\n\nclass Square(Resource):\n    def post(self):\n        data = request.get_json()\n        num = data.get('num', 0)\n        app.logger.info(f\"POST request received at Square endpoint with num: {num}\")\n        return jsonify({'square': num**2})\n\nclass Link(Resource):\n    def get(self):\n        return {'message': 'This is the Link endpoint'}\n    \n    def post(self):\n        # Get a link to the page that displays the calendar events\n        data = request.get_json()\n        app.logger.info(f\"POST request received at Link endpoint with data: {data}\")\n        return {'data': data}, 201\n\n\nclass FetchEvents(Resource):\n    def __init__(self):\n        self.conn = create_database_connection()\n        self.cursor = self.conn.cursor()\n\n    def get(self):\n        return {'message': 'This is the FetchEvents endpoint'}\n    \n    def post(self):\n        data = request.get_json()\n        app.logger.info(f\"GET request received at Database endpoint with data: {data}\")\n        get_event_query = \"SELECT * FROM events WHERE creationId = %s\"\n        creation_id = data.get('creationId')\n        self.cursor.execute(get_event_query, (creation_id,))\n        events = self.cursor.fetchall()\n        app.logger.info(f\"Fetched events: {events}\")\n        formated_events = [self._format_db_items(event) for event in events]\n\n        if formated_events:\n            return {'data': str(formated_events)}, 200\n        return {'error': 'Events not found'}, 404\n\n    def _format_db_items(self, item):\n        new_item = {\n            'id': item[0],\n            'title': item[1],\n            'start': item[2].isoformat(),\n            'end': item[3].isoformat(),\n            'description': item[6],\n            'creationId': item[4]\n        }\n        app.logger.info(f\"Formatted DB item: {new_item}\")\n        return new_item \n            \nclass Database(Resource):\n    def __init__(self):\n        self.conn = create_database_connection()\n        self.cursor = self.conn.cursor()\n        self.base_url = os.getenv('EVENT_VIEW_URL', 'http://localhost:5000')\n        \n    def get(self):\n        return {'message': 'This is the Database endpoint'}\n    \n    def post(self):\n        # Add multiple calendar events to the database\n        data = request.get_json()\n        app.logger.info(f\"\\n POST request received at Database endpoint with data: {data}\")\n        \n        if not isinstance(data, list):\n            return {'error': 'Input data must be a list of events'}, 400\n        \n        add_event_query = (\"INSERT INTO events \"\n                           \"(title, start, end, description, creationId) \"\n                           \"VALUES (%s, %s, %s, %s, %s)\")\n        \n        creation_id = self._generate_unique_id()\n        try:\n            for event in data:\n                add_event_data = (event['name'], event['start'], event['end'], event['description'], creation_id)\n                app.logger.info(f\"\\n Adding event with creationId: {creation_id}\")\n                self.cursor.execute(add_event_query, add_event_data)\n            \n            self.conn.commit()\n            app.logger.info(\"All events added to the database successfully\")\n            return {'message': 'Events added successfully', 'link': self._generate_link(creation_id)}, 201\n        except mysql.connector.Error as err:\n            app.logger.error(f\"Error: {err}\")\n            self.conn.rollback()\n            return {'error': str(err)}, 500\n        \n    def _generate_unique_id(self):\n        self.cursor.execute(\"SELECT MAX(creationId) FROM events\")\n        max_id = self.cursor.fetchone()[0]\n        return (max_id or 0) + 1\n\n    def _generate_link(self, creation_id):\n        base_url = self.base_url\n        return f\"{base_url}/{creation_id}\"\n    \n# adding the defined resources along with their corresponding url\ndef create_database_connection():\n    try:\n        conn = mysql.connector.connect(\n            host=os.getenv('DB_HOST'),\n            user=DB_USER,\n            database=os.getenv('DB_NAME'),\n            password=DB_PASSWORD,\n            port=os.getenv('DB_PORT')\n        )\n        if conn.is_connected():\n            app.logger.info(\"Successfully connected to the database\")\n            return conn\n        else:\n            app.logger.error(\"Failed to connect to the database\")\n            return None\n    except mysql.connector.Error as err:\n        app.logger.error(f\"Error: {err}\")\n        return None\n\ndef close_database_connection(conn):\n    if conn and conn.is_connected():\n        conn.close()\n        app.logger.info(\"Database connection closed\")\n\n# driver function\nif __name__ == '__main__':\n    api.add_resource(Hello, '/')\n    api.add_resource(Square, '/square/')\n    api.add_resource(Link, '/link/')\n    api.add_resource(Database, '/database/')\n    api.add_resource(FetchEvents, '/fetch_events/')\n    app.run(debug=True, host='0.0.0.0')"
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: link-provider
  name: link-provider-cm0
