
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    io.kompose.service: db-data
  name: db-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
data:
  db-password: S1VkQXJha3huR25mRUpNM0pBMlBnaQo=
kind: Secret
metadata:
  labels:
    io.kompose.service: db-password
  name: db-password
type: Opaque
---
apiVersion: v1
data:
  db-user: cm9vdAo=
kind: Secret
metadata:
  labels:
    io.kompose.service: db-user
  name: db-user
type: Opaque
---
apiVersion: v1
data:
  schema.sql: |
    -- schema.sql

    -- Make sure schema exists
    CREATE DATABASE IF NOT EXISTS event_store;

    -- Switch to schema
    USE event_store;

    -- Example table
    CREATE TABLE IF NOT EXISTS events (
        id INT AUTO_INCREMENT PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        start datetime DEFAULT CURRENT_TIMESTAMP,
        end datetime DEFAULT CURRENT_TIMESTAMP,
        creationId INT NOT NULL DEFAULT 0,
        created_at datetime DEFAULT CURRENT_TIMESTAMP,
        description TEXT,
        available BOOLEAN DEFAULT FALSE,
        payload JSON
    );

    -- Insert a sample event
    INSERT INTO events (title, start, end, created_at, description, available, payload)
    VALUES ('sample', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'test', TRUE, JSON_OBJECT('username', 'alice', 'email', 'alice@example.com'));
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: event-store
  name: event-store-cm1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: event-store
  labels:
    io.kompose.service: event-store
spec:
  serviceName: "event-store"
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: event-store
  template:
    metadata:
      labels:
        io.kompose.service: event-store
    spec:
      containers:
        - name: event-store
          image: mysql:8.0
          env:
            - name: MYSQL_DATABASE
              value: event_store
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-password
                  key: db-password
          ports:
            - containerPort: 3306
              protocol: TCP
          volumeMounts:
            - name: db-data
              mountPath: /var/lib/mysql
            - name: event-store-cm1
              mountPath: /docker-entrypoint-initdb.d
            - name: db-password
              mountPath: /run/db-secrets/db-password
              subPath: db-password
      volumes:
        - name: db-password
          secret:
            items:
              - key: db-password
                path: db-password
            secretName: db-password
        - configMap:
            name: event-store-cm1
          name: event-store-cm1
  volumeClaimTemplates:
    - metadata:
        name: db-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: 100Mi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: event-store
  name: event-store
spec:
  type: ClusterIP
  ports:
    - name: "mysql"
      port: 3306
      targetPort: 3306
  selector:
    io.kompose.service: event-store
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-env
data:
  env.js: |
    window.API_BASE_URL = 'http://localhost:31567';
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: frontend
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: frontend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: frontend
    spec:
      containers:
        - image: arrow02/angular-calendar:latest
          name: frontend
          ports:
            - containerPort: 4200
              protocol: TCP
          volumeMounts:
            - name: frontend-env
              mountPath: /usr/share/nginx/html/assets/env.js
              subPath: env.js
      volumes:
        - name: frontend-env
          configMap:
            name: frontend-env
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: frontend
  name: frontend
spec:
  type: LoadBalancer
  ports:
    - name: "4200"
      port: 4200
      targetPort: 4200
  selector:
    io.kompose.service: frontend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: link-provider
  name: link-provider
spec:
  replicas: 3
  selector:
    matchLabels:
      io.kompose.service: link-provider
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: link-provider
    spec:
      containers:
        - env:
            - name: DB_HOST
              value: event-store
            - name: DB_NAME
              value: event_store
            - name: DB_PORT
              value: "3306"
            - name: EVENT_VIEW_URL
              value: http://localhost:4200/signup
          image: arrow02/link-provider:latest
          name: link-provider
          ports:
            - containerPort: 5000
              protocol: TCP
          volumeMounts:
          - name: db-user
            mountPath: /run/secrets/db_user
            subPath: db-user
          - name: db-password
            mountPath: /run/secrets/db_password
            subPath: db-password
      restartPolicy: Always
      volumes:
        - name: db-user
          secret:
            items:
              - key: db-user
                path: db-user
            secretName: db-user
        - name: db-password
          secret:
            items:
              - key: db-password
                path: db-password
            secretName: db-password

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: link-provider
  name: link-provider
spec:
  type: NodePort
  ports:
    - name: "http"
      port: 5000
      targetPort: 5000
      nodePort: 31567 
  selector:
    io.kompose.service: link-provider
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: signup-provider
  name: signup-provider
spec:
  replicas: 3
  selector:
    matchLabels:
      io.kompose.service: signup-provider
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: signup-provider
    spec:
      containers:
        - env:
            - name: DB_HOST
              value: event-store
            - name: DB_NAME
              value: event_store
            - name: DB_PORT
              value: "3306"
            - name: EVENT_VIEW_URL
              value: http://localhost:4200/signup
          image: arrow02/signup-provider:latest
          name: signup-provider
          ports:
            - containerPort: 5001
              protocol: TCP
          volumeMounts:
          - name: db-user
            mountPath: /run/secrets/db_user
            subPath: db-user
          - name: db-password
            mountPath: /run/secrets/db_password
            subPath: db-password
      restartPolicy: Always
      volumes:
        - name: db-user
          secret:
            items:
              - key: db-user
                path: db-user
            secretName: db-user
        - name: db-password
          secret:
            items:
              - key: db-password
                path: db-password
            secretName: db-password

---
apiVersion: v1
kind: Service
metadata:
  labels:
    io.kompose.service: signup-provider
  name: signup-provider
spec:
  type: NodePort
  ports:
    - name: "http"
      port: 5001
      targetPort: 5001
      nodePort: 31566 
  selector:
    io.kompose.service: signup-provider
